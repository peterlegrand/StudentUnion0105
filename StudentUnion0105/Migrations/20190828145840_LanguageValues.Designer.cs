// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentUnion0105.Data;

namespace StudentUnion0105.Migrations
{
    [DbContext(typeof(SuDbContext))]
    [Migration("20190828145840_LanguageValues")]
    partial class LanguageValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Claim");

                    b.Property<string>("ClaimGroup");

                    b.HasKey("Id");

                    b.ToTable("dbClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Claim = "Classification",
                            ClaimGroup = "Classification"
                        },
                        new
                        {
                            Id = 3,
                            Claim = "ClassificationPage",
                            ClaimGroup = "Classification"
                        },
                        new
                        {
                            Id = 4,
                            Claim = "Roles",
                            ClaimGroup = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            Claim = "ClassificationLevel",
                            ClaimGroup = "Classification"
                        });
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassificationId");

                    b.Property<string>("ClassificationMenuName");

                    b.Property<string>("ClassificationMouseOver");

                    b.Property<string>("ClassificationName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("dbClassificationLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationLevelLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassificationLevelId");

                    b.Property<string>("ClassificationLevelMenuName");

                    b.Property<string>("ClassificationLevelMouseOver");

                    b.Property<string>("ClassificationLevelName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationLevelId");

                    b.HasIndex("LanguageId");

                    b.ToTable("dbClassificationLevelLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationLevelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Alphabetically");

                    b.Property<bool>("CanLink");

                    b.Property<int>("ClassificationId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<bool>("DateLevel");

                    b.Property<bool>("InDropDown");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<bool>("OnTheFly");

                    b.Property<int>("Sequence");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.ToTable("dbClassificationLevel");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassificationStatusId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<int>("DefailClassificationPageId");

                    b.Property<int>("DropDownSequence");

                    b.Property<bool>("HasDropDown");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationStatusId");

                    b.ToTable("dbClassification");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassificationStatusName");

                    b.HasKey("Id");

                    b.ToTable("dbClassificationStatus");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationValueLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassificationValueDescription");

                    b.Property<string>("ClassificationValueDropDownName");

                    b.Property<string>("ClassificationValueHeaderDescription");

                    b.Property<string>("ClassificationValueHeaderName");

                    b.Property<int>("ClassificationValueId");

                    b.Property<string>("ClassificationValueMenuName");

                    b.Property<string>("ClassificationValueMouseOver");

                    b.Property<string>("ClassificationValueName");

                    b.Property<string>("ClassificationValuePageDescription");

                    b.Property<string>("ClassificationValuePageName");

                    b.Property<string>("ClassificationValueTopicName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationValueId");

                    b.HasIndex("LanguageId");

                    b.ToTable("dbClassificationValueLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationValueModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassificationLevelId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<DateTimeOffset>("DateFrom");

                    b.Property<DateTimeOffset>("DateTo");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<int?>("ParentValueId");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationLevelId");

                    b.ToTable("dbClassificationValue");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuContentTypeLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentTypeId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<string>("MouseOver");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("dbContentTypeLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuContentTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.HasKey("Id");

                    b.ToTable("dbContentType");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ForeignName");

                    b.Property<string>("ISO6391");

                    b.Property<string>("ISO6392");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("dbLanguage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            ForeignName = "аҧсуа бызшәа, аҧсшәа",
                            ISO6391 = "ab",
                            ISO6392 = "abk",
                            LanguageName = "Abkhazian"
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            ForeignName = "Afaraf",
                            ISO6391 = "aa",
                            ISO6392 = "aar",
                            LanguageName = "Afar"
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            ForeignName = "Afrikaans",
                            ISO6391 = "af",
                            ISO6392 = "afr",
                            LanguageName = "Afrikaans"
                        },
                        new
                        {
                            Id = 4,
                            Active = false,
                            ForeignName = "Akan",
                            ISO6391 = "ak",
                            ISO6392 = "aka",
                            LanguageName = "Akan"
                        },
                        new
                        {
                            Id = 5,
                            Active = false,
                            ForeignName = "Shqip",
                            ISO6391 = "sq",
                            ISO6392 = "sqi",
                            LanguageName = "Albanian"
                        },
                        new
                        {
                            Id = 6,
                            Active = false,
                            ForeignName = "አማርኛ",
                            ISO6391 = "am",
                            ISO6392 = "amh",
                            LanguageName = "Amharic"
                        },
                        new
                        {
                            Id = 7,
                            Active = false,
                            ForeignName = "العربية",
                            ISO6391 = "ar",
                            ISO6392 = "ara",
                            LanguageName = "Arabic"
                        },
                        new
                        {
                            Id = 8,
                            Active = false,
                            ForeignName = "aragonés",
                            ISO6391 = "an",
                            ISO6392 = "arg",
                            LanguageName = "Aragonese"
                        },
                        new
                        {
                            Id = 9,
                            Active = false,
                            ForeignName = "Հայերեն",
                            ISO6391 = "hy",
                            ISO6392 = "hye",
                            LanguageName = "Armenian"
                        },
                        new
                        {
                            Id = 10,
                            Active = false,
                            ForeignName = "অসমীয়া",
                            ISO6391 = "as",
                            ISO6392 = "asm",
                            LanguageName = "Assamese"
                        },
                        new
                        {
                            Id = 11,
                            Active = false,
                            ForeignName = "авар мацӀ, магӀарул мацӀ",
                            ISO6391 = "av",
                            ISO6392 = "ava",
                            LanguageName = "Avaric"
                        },
                        new
                        {
                            Id = 12,
                            Active = false,
                            ForeignName = "avesta",
                            ISO6391 = "ae",
                            ISO6392 = "ave",
                            LanguageName = "Avestan"
                        },
                        new
                        {
                            Id = 13,
                            Active = false,
                            ForeignName = "aymar aru",
                            ISO6391 = "ay",
                            ISO6392 = "aym",
                            LanguageName = "Aymara"
                        },
                        new
                        {
                            Id = 14,
                            Active = false,
                            ForeignName = "azərbaycan dili",
                            ISO6391 = "az",
                            ISO6392 = "aze",
                            LanguageName = "Azerbaijani"
                        },
                        new
                        {
                            Id = 15,
                            Active = false,
                            ForeignName = "bamanankan",
                            ISO6391 = "bm",
                            ISO6392 = "bam",
                            LanguageName = "Bambara"
                        },
                        new
                        {
                            Id = 16,
                            Active = false,
                            ForeignName = "башҡорт теле",
                            ISO6391 = "ba",
                            ISO6392 = "bak",
                            LanguageName = "Bashkir"
                        },
                        new
                        {
                            Id = 17,
                            Active = false,
                            ForeignName = "euskara, euskera",
                            ISO6391 = "eu",
                            ISO6392 = "eus",
                            LanguageName = "Basque"
                        },
                        new
                        {
                            Id = 18,
                            Active = false,
                            ForeignName = "беларуская мова",
                            ISO6391 = "be",
                            ISO6392 = "bel",
                            LanguageName = "Belarusian"
                        },
                        new
                        {
                            Id = 19,
                            Active = false,
                            ForeignName = "বাংলা",
                            ISO6391 = "bn",
                            ISO6392 = "ben",
                            LanguageName = "Bengali"
                        },
                        new
                        {
                            Id = 20,
                            Active = false,
                            ForeignName = "भोजपुरी",
                            ISO6391 = "bh",
                            ISO6392 = "bih",
                            LanguageName = "Bihari languages"
                        },
                        new
                        {
                            Id = 21,
                            Active = false,
                            ForeignName = "Bislama",
                            ISO6391 = "bi",
                            ISO6392 = "bis",
                            LanguageName = "Bislama"
                        },
                        new
                        {
                            Id = 22,
                            Active = false,
                            ForeignName = "bosanski jezik",
                            ISO6391 = "bs",
                            ISO6392 = "bos",
                            LanguageName = "Bosnian"
                        },
                        new
                        {
                            Id = 23,
                            Active = false,
                            ForeignName = "brezhoneg",
                            ISO6391 = "br",
                            ISO6392 = "bre",
                            LanguageName = "Breton"
                        },
                        new
                        {
                            Id = 24,
                            Active = false,
                            ForeignName = "български език",
                            ISO6391 = "bg",
                            ISO6392 = "bul",
                            LanguageName = "Bulgarian"
                        },
                        new
                        {
                            Id = 25,
                            Active = false,
                            ForeignName = "ဗမာစာ",
                            ISO6391 = "my",
                            ISO6392 = "mya",
                            LanguageName = "Burmese"
                        },
                        new
                        {
                            Id = 26,
                            Active = false,
                            ForeignName = "català, valencià",
                            ISO6391 = "ca",
                            ISO6392 = "cat",
                            LanguageName = "Catalan, Valencian"
                        },
                        new
                        {
                            Id = 27,
                            Active = false,
                            ForeignName = "Chamoru",
                            ISO6391 = "ch",
                            ISO6392 = "cha",
                            LanguageName = "Chamorro"
                        },
                        new
                        {
                            Id = 28,
                            Active = false,
                            ForeignName = "нохчийн мотт",
                            ISO6391 = "ce",
                            ISO6392 = "che",
                            LanguageName = "Chechen"
                        },
                        new
                        {
                            Id = 29,
                            Active = false,
                            ForeignName = "chiCheŵa, chinyanja",
                            ISO6391 = "ny",
                            ISO6392 = "nya",
                            LanguageName = "Chichewa, Chewa, Nyanja"
                        },
                        new
                        {
                            Id = 30,
                            Active = false,
                            ForeignName = "中文(Zhōngwén), 汉语, 漢語",
                            ISO6391 = "zh",
                            ISO6392 = "zho",
                            LanguageName = "Chinese"
                        },
                        new
                        {
                            Id = 31,
                            Active = false,
                            ForeignName = "чӑваш чӗлхи",
                            ISO6391 = "cv",
                            ISO6392 = "chv",
                            LanguageName = "Chuvash"
                        },
                        new
                        {
                            Id = 32,
                            Active = false,
                            ForeignName = "Kernewek",
                            ISO6391 = "kw",
                            ISO6392 = "cor",
                            LanguageName = "Cornish"
                        },
                        new
                        {
                            Id = 33,
                            Active = false,
                            ForeignName = "corsu, lingua corsa",
                            ISO6391 = "co",
                            ISO6392 = "cos",
                            LanguageName = "Corsican"
                        },
                        new
                        {
                            Id = 34,
                            Active = false,
                            ForeignName = "ᓀᐦᐃᔭᐍᐏᐣ",
                            ISO6391 = "cr",
                            ISO6392 = "cre",
                            LanguageName = "Cree"
                        },
                        new
                        {
                            Id = 35,
                            Active = false,
                            ForeignName = "hrvatski jezik",
                            ISO6391 = "hr",
                            ISO6392 = "hrv",
                            LanguageName = "Croatian"
                        },
                        new
                        {
                            Id = 36,
                            Active = false,
                            ForeignName = "čeština, český jazyk",
                            ISO6391 = "cs",
                            ISO6392 = "ces",
                            LanguageName = "Czech"
                        },
                        new
                        {
                            Id = 37,
                            Active = false,
                            ForeignName = "dansk",
                            ISO6391 = "da",
                            ISO6392 = "dan",
                            LanguageName = "Danish"
                        },
                        new
                        {
                            Id = 38,
                            Active = false,
                            ForeignName = "ދިވެހި",
                            ISO6391 = "dv",
                            ISO6392 = "div",
                            LanguageName = "Divehi, Dhivehi, Maldivian"
                        },
                        new
                        {
                            Id = 39,
                            Active = false,
                            ForeignName = "Nederlands, Vlaams",
                            ISO6391 = "nl",
                            ISO6392 = "nld",
                            LanguageName = "Dutch, Flemish"
                        },
                        new
                        {
                            Id = 40,
                            Active = false,
                            ForeignName = "རྫོང་ཁ",
                            ISO6391 = "dz",
                            ISO6392 = "dzo",
                            LanguageName = "Dzongkha"
                        },
                        new
                        {
                            Id = 41,
                            Active = false,
                            ForeignName = "English",
                            ISO6391 = "en",
                            ISO6392 = "eng",
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = 42,
                            Active = false,
                            ForeignName = "Esperanto",
                            ISO6391 = "eo",
                            ISO6392 = "epo",
                            LanguageName = "Esperanto"
                        },
                        new
                        {
                            Id = 43,
                            Active = false,
                            ForeignName = "eesti, eesti keel",
                            ISO6391 = "et",
                            ISO6392 = "est",
                            LanguageName = "Estonian"
                        },
                        new
                        {
                            Id = 44,
                            Active = false,
                            ForeignName = "Eʋegbe",
                            ISO6391 = "ee",
                            ISO6392 = "ewe",
                            LanguageName = "Ewe"
                        },
                        new
                        {
                            Id = 45,
                            Active = false,
                            ForeignName = "føroyskt",
                            ISO6391 = "fo",
                            ISO6392 = "fao",
                            LanguageName = "Faroese"
                        },
                        new
                        {
                            Id = 46,
                            Active = false,
                            ForeignName = "vosa Vakaviti",
                            ISO6391 = "fj",
                            ISO6392 = "fij",
                            LanguageName = "Fijian"
                        },
                        new
                        {
                            Id = 47,
                            Active = false,
                            ForeignName = "suomi, suomen kieli",
                            ISO6391 = "fi",
                            ISO6392 = "fin",
                            LanguageName = "Finnish"
                        },
                        new
                        {
                            Id = 48,
                            Active = false,
                            ForeignName = "français, langue française",
                            ISO6391 = "fr",
                            ISO6392 = "fra",
                            LanguageName = "French"
                        },
                        new
                        {
                            Id = 184,
                            Active = false,
                            ForeignName = "isiZulu",
                            ISO6391 = "zu",
                            ISO6392 = "zul",
                            LanguageName = "Zulu"
                        });
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<string>("MouseOver");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("dbOrganizationLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<int>("OrganizationStatusId");

                    b.Property<int>("OrganizationTypeId");

                    b.Property<int>("ParentOrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationStatusId");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("dbOrganization");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationStatusName");

                    b.HasKey("Id");

                    b.ToTable("dbOrganizationStatus");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationTypeLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<string>("MouseOver");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("dbOrganizationTypeLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.HasKey("Id");

                    b.ToTable("dbOrganizationType");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuProjectLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<string>("MouseOver");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbProjectLanguage");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuProjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatorId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("ModifierId");

                    b.Property<int>("ParentProjectId");

                    b.Property<int>("ProjectStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("dbProject");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuProjectStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProjectStatusName");

                    b.HasKey("Id");

                    b.ToTable("dbProjectStatus");
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeValue");

                    b.Property<Guid>("GuidValue");

                    b.Property<int>("IntValue");

                    b.Property<string>("SettingDescription");

                    b.Property<string>("SettingName");

                    b.Property<string>("StringValue");

                    b.HasKey("Id");

                    b.ToTable("dbSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeValue = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuidValue = new Guid("00000000-0000-0000-0000-000000000000"),
                            IntValue = 1,
                            SettingName = "Dedault language"
                        });
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("DefaultLangauge");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentUnion0105.Models.SuUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuClassificationModel", "Classification")
                        .WithMany("ClassificationLanguages")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("ClassificationLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationLevelLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuClassificationLevelModel", "ClassificationLevel")
                        .WithMany("ClassificationLevelLanguages")
                        .HasForeignKey("ClassificationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("ClassificationLevelLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationLevelModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuClassificationModel", "Classification")
                        .WithMany("ClassificationLevels")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuClassificationStatusModel", "ClassificationStatus")
                        .WithMany("Classifications")
                        .HasForeignKey("ClassificationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationValueLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuClassificationValueModel", "ClassificationValue")
                        .WithMany("ClassificationValueLanguages")
                        .HasForeignKey("ClassificationValueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("ClassificationValueLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuClassificationValueModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuClassificationLevelModel", "ClassificationLevel")
                        .WithMany("ClassificationValues")
                        .HasForeignKey("ClassificationLevelId")
                        .HasConstraintName("FKClassificationValuestoLevel")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuContentTypeLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuContentTypeModel", "ContentType")
                        .WithMany("ContentTypeLanguages")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("ContentTypeLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("OrganizationLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentUnion0105.Models.SuOrganizationModel", "Organization")
                        .WithMany("OrganizationLanguages")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuOrganizationStatusModel", "OrganizationStatus")
                        .WithMany("Organization")
                        .HasForeignKey("OrganizationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentUnion0105.Models.SuOrganizationTypeModel", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuOrganizationTypeLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("OrganizationTypeLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentUnion0105.Models.SuOrganizationTypeModel", "OrganizationType")
                        .WithMany("OrganizationTypeLanguages")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuProjectLanguageModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuLanguageModel", "Language")
                        .WithMany("ProjectLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentUnion0105.Models.SuProjectModel", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentUnion0105.Models.SuProjectModel", b =>
                {
                    b.HasOne("StudentUnion0105.Models.SuProjectStatusModel", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
